     pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        //retry(1)
    }
    environment {
        DEBUG = 'true'
        appVersion = ''  // This will be global, usable across the pipeline
    }

    stages {
        stage('Read the version') {
            steps {
                script {
                    def packageJSON = readJSON file: 'package.json'
                    appVersion = packageJSON.version
                    echo "App version: ${appVersion}"
                }
            }
        }

        stage('Test') {
            steps {
                sh 'echo This is a test'
                sh 'env'
            }
        }

        stage('Deploy') {
            when {
                expression { env.GIT_BRANCH != "origin/main" }
            }
            steps {
                sh 'echo This is deploy'
                // Uncomment the next line to simulate an error in deploy
                // error 'pipeline failed'
            }
        }

        stage('Print Params') {
            steps {
                echo "Hello ${params.PERSON}"
                echo "Biography: ${params.BIOGRAPHY}"
                echo "Toggle: ${params.TOGGLE}"
                echo "Choice: ${params.CHOICE}"
                echo "Password: ${params.PASSWORD}"
            }
        }
    }

    post {
        always {
            echo "This section runs always"
            deleteDir()  // Clean up workspace after execution
        }
        success {
            echo "This section runs when the pipeline is successful"
        }
        failure {
            echo "This section runs when the pipeline fails"
        }
    }
}